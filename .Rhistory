data = ypsps_clean,
method = "optimal",
distance = "glm",
link="logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold=.1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
ps_models[i] <- model_ps
pre <- data.frame(summary(model_ps)$sum.all) %>% pull(Std..Mean.Diff.) %>% mean()
post <- data.frame(summary(model_ps)$sum.matched) %>% pull(Std..Mean.Diff.) %>% mean()
percent_imp[i] <- (post-pre)/pre
}
# Simulate random selection of features 10k+ times
atts <- c()
ps_models <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(
names(ypsps_clean %>% select(-c(student_ppnscal, college) )),
sample(2:ncol(ypsps_clean), 1)-1
)
independent <- paste(colnames, collapse=" + ")
ps_formula <- as.formula(paste("college ~", independent))
model_ps <-
matchit(
replace=TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "nearest",
ratio = 1,
distance = "glm",
link="logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold=.1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
ps_models[i] <- model_ps
pre <- data.frame(summary(model_ps)$sum.all) %>% pull(Std..Mean.Diff.) %>% mean()
post <- data.frame(summary(model_ps)$sum.matched) %>% pull(Std..Mean.Diff.) %>% mean()
percent_imp[i] <- (post-pre)/pre
}
atts
prop_balanced
percent_imp
summary(model_ps)
colnames <- sample(
names(ypsps_clean %>% select(-c(student_ppnscal, college) )),
sample(2:ncol(ypsps_clean), 1)-1
)
COLNAMES
colnames
independent <- paste(colnames, collapse=" + ")
ps_formula <- as.formula(paste("college ~", independent))
ps_formula
model_ps <-
matchit(
replace=TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "nearest",
ratio = 1,
distance = "glm",
link="logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold=.1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
ps_models[i] <- model_ps
pre <- data.frame(summary(model_ps)$sum.all) %>% pull(Std..Mean.Diff.) %>% mean()
post <- data.frame(summary(model_ps)$sum.matched) %>% pull(Std..Mean.Diff.) %>% mean()
percent_imp[i] <- (post-pre)/pre
pre
post
summary(model_ps)
bal.tab(model_ps)
summary(model_ps)
pre <- data.frame(summary(model_ps)$sum.all) %>% pull(Std..Mean.Diff.) %>% mean()
pre
# Simulate random selection of features 10k+ times
atts <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(
names(ypsps_clean %>% select(-c(student_ppnscal, college) )),
sample(2:ncol(ypsps_clean), 1)-1
)
independent <- paste(colnames, collapse=" + ")
ps_formula <- as.formula(paste("college ~", independent))
model_ps <-
matchit(
replace=TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "nearest",
ratio = 1,
distance = "glm",
link="logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold=.1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>% pull(Std..Mean.Diff.) %>% mean()
post <- data.frame(summary(model_ps)$sum.matched) %>% pull(Std..Mean.Diff.) %>% mean()
percent_imp[i] <- (post-pre)/pre
}
atts
prop_balanced
data.frame(c(atts, prop_balanced, percent_imp))
data.frame(c(atts, prop_balanced, percent_imp))
data.frame(atts, prop_balanced, percent_imp)
siim_results <- data.frame(atts, prop_balanced, percent_imp)
sim_results <- data.frame(atts, prop_balanced, percent_imp)
sim_results
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue", size = 3, shape = 21, fill = "white") +
labs(title = "Scatterplot of mpg vs. wt", x = "Weight (1000 lbs)", y = "Miles per gallon")
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue", size = 3, shape = 21, fill = "white") +
labs(x = "Proportion Balance", y = "ATT")
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue", fill = "blue") +
labs(x = "Proportion Balance", y = "ATT")
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue", fill = "blue", alpha=.7) +
labs(x = "Proportion Balance", y = "ATT")
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue", fill = "blue", alpha=.7) +
labs(x = "Proportion of Features Balanced", y = "ATT")
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue",
fill = "blue",
alpha = .7) +
labs(x = "Proportion of Features Balanced", y = "ATT")
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
library(cobalt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
head(ypsps)
# Plot ATT v. proportion
# Customize the scatterplot
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue",
fill = "blue",
alpha = .7) +
labs(x = "Proportion of Features Balanced", y = "ATT")
sim_results
ggplot(data = sim_results, aes(x = atts)) +
geom_histogram(bins=30, fill="orange", alpha=.6) +
geom_vline(xintercept=0, linetype = "dashed") +
labs(title = "Treat-Control, Balance on Gender", x = "P(Male | treat) - P(Male | control)", y = "Frequency")
ggplot(data = sim_results, aes(x = percent_imp)) +
geom_histogram(bins=30, fill="orange", alpha=.6) +
geom_vline(xintercept=0, linetype = "dashed") +
labs(title = "Treat-Control, Balance on Gender", x = "P(Male | treat) - P(Male | control)", y = "Frequency")
ggplot(data = sim_results, aes(x = prop_balanced)) +
geom_histogram(bins=30, fill="orange", alpha=.6) +
geom_vline(xintercept=0, linetype = "dashed") +
labs(title = "Treat-Control, Balance on Gender", x = "P(Male | treat) - P(Male | control)", y = "Frequency")
sim_results %>% filter(prop_balanced ? 2/29)
sim_results %>% filter(prop_balanced > 2/29)
# Select covariates that represent the "true" model for selection, fit model
model_data <- ypsps %>%
select(college,
student_ppnscal,
student_Gen,
student_Race,
student_GPA,
parent_HHInc,
parent_EducW,
parent_EducHH)
model_ps <-
matchit(
formula = college ~ student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = model_data_match,
method = "nearest",
distance = "glm",
link="logit",
estimand = "ATT"
)
# model_data <- model_data %>% mutate(prop_score = predict(model_ps))
match_exact_ate_data <- match.data(model_ps)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match_exact_ate_data,
weights = weights
)
att_ps <- lm_att$coefficients['college1']
att_ps
```{r}
bal.plot(model_ps, which = 'unadjusted')
out <- bal.tab(model_ps, binary = "std", threshold = 0.1)
out <- bal.tab(model_ps, binary = "std", threshold = 0.1)
out
summary(model_ps)
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
(post - pre) / pre
out <- bal.tab(model_ps, binary = "std", threshold = 0.1)
out
# Remove post-treatment covariates
ypsps_clean <- ypsps %>%
select(-c(
matches("_19\\d\\d"),
'interviewid',
'Treatment',
matches('\\wPlacebo')
))
# Simulate random selection of features 10k+ times
atts <- c()
# Remove post-treatment covariates
ypsps_clean <- ypsps %>%
select(-c(
matches("_19\\d\\d"),
'interviewid',
'Treatment',
matches('\\wPlacebo')
))
# Simulate random selection of features 10k+ times
atts <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(names(ypsps_clean %>% select(-c(
student_ppnscal, college
))),
sample(2:ncol(ypsps_clean), 1) - 1)
independent <- paste(colnames, collapse = " + ")
ps_formula <- as.formula(paste("college ~", independent))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <-
matchit(
replace = TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "nearest",
ratio = 1,
distance = "glm",
link = "logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold = .1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
percent_imp[i] <- (post - pre) / pre
}
sim_results <- data.frame(atts, prop_balanced, percent_imp)
sim_results %>% filter(prop_balanced > 2/29)
sim_results %>% filter(prop_balanced > 2/29) %>% nrow()
# Simulate random selection of features 10k+ times
atts <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(names(ypsps_clean %>% select(-c(
student_ppnscal, college
))),
sample(2:ncol(ypsps_clean), 1) - 1)
independent <- paste(colnames, collapse = " + ")
ps_formula <- as.formula(paste("college ~", independent))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <-
matchit(
replace = TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "exact",
ratio = 1,
distance = "glm",
link = "logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold = .1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
percent_imp[i] <- (post - pre) / pre
}
for (i in 1:100) {
# Randomly select features
colnames <- sample(names(ypsps_clean %>% select(-c(
student_ppnscal, college
))),
sample(2:ncol(ypsps_clean), 1) - 1)
independent <- paste(colnames, collapse = " + ")
ps_formula <- as.formula(paste("college ~", independent))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <-
matchit(
replace = TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "optimal",
ratio = 1,
distance = "glm",
link = "logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold = .1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
percent_imp[i] <- (post - pre) / pre
}
# Simulate random selection of features 10k+ times
atts <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(names(ypsps_clean %>% select(-c(
student_ppnscal, college
))),
sample(2:ncol(ypsps_clean), 1) - 1)
independent <- paste(colnames, collapse = " + ")
ps_formula <- as.formula(paste("college ~", independent))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <-
matchit(
replace = TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "quick",
ratio = 1,
distance = "glm",
link = "logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold = .1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
percent_imp[i] <- (post - pre) / pre
}
install.packages("quickmatch")
# Simulate random selection of features 10k+ times
atts <- c()
prop_balanced <- c()
percent_imp <- c()
for (i in 1:100) {
# Randomly select features
colnames <- sample(names(ypsps_clean %>% select(-c(
student_ppnscal, college
))),
sample(2:ncol(ypsps_clean), 1) - 1)
independent <- paste(colnames, collapse = " + ")
ps_formula <- as.formula(paste("college ~", independent))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <-
matchit(
replace = TRUE,
formula = ps_formula,
data = ypsps_clean,
method = "quick",
ratio = 1,
distance = "glm",
link = "logit",
estimand = "ATT",
)
lm_att <-
lm(
student_ppnscal ~ college + student_Gen + student_Race + student_GPA +
parent_HHInc + parent_EducW + parent_EducHH,
data = match.data(model_ps),
weights = weights
)
out <- bal.tab(model_ps, threshold = .1)
att_ps <- lm_att$coefficients['college']
atts[i] <- att_ps
prop_balanced[i] <- out$Balanced.mean.diffs['Balanced, <0.1', ] /
out$Balanced.mean.diffs %>% sum()
pre <- data.frame(summary(model_ps)$sum.all) %>%
pull(Std..Mean.Diff.) %>%
mean()
post <- data.frame(summary(model_ps)$sum.matched) %>%
pull(Std..Mean.Diff.) %>%
mean()
percent_imp[i] <- (post - pre) / pre
}
# Visualization for distributions of percent improvement
sim_results <- data.frame(atts, prop_balanced, percent_imp)
sim_results %>% filter(prop_balanced > 2/29) %>% nrow()
ggplot(sim_results, aes(x = prop_balanced, y = atts)) +
geom_point(color = "blue",
fill = "blue",
alpha = .7) +
labs(x = "Proportion of Features Balanced", y = "ATT")
